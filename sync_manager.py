#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
–º–µ–∂–¥—É API –∏ —Ñ–∞–π–ª–æ–≤—ã–º watcher
"""
import threading
import time
import os
from agent.vector_db import VectorDB

class RegenerationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not hasattr(self, 'initialized'):
            self.regeneration_lock = threading.Lock()
            self.is_regenerating = False
            self.last_regeneration = 0
            self.min_interval = 2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            self.vector_db = VectorDB()
            self.initialized = True
    
    def regenerate(self, files_path, source="Unknown"):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
        
        Args:
            files_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if current_time - self.last_regeneration < self.min_interval:
            return {
                "status": "skipped", 
                "message": f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç {source})"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if self.is_regenerating:
            return {
                "status": "in_progress", 
                "message": f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–∞–ø—Ä–æ—Å –æ—Ç {source} –ø—Ä–æ–ø—É—â–µ–Ω"
            }
        
        with self.regeneration_lock:
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞
            if self.is_regenerating:
                return {
                    "status": "in_progress", 
                    "message": f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∑–∞–ø—Ä–æ—Å –æ—Ç {source} –ø—Ä–æ–ø—É—â–µ–Ω"
                }
            
            self.is_regenerating = True
            try:
                print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏
                if not os.path.exists(files_path):
                    os.makedirs(files_path, exist_ok=True)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                self.vector_db.create_vector_store(files_path)
                self.last_regeneration = current_time
                
                print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {time.strftime('%H:%M:%S')} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
                
                return {
                    "status": "success", 
                    "message": "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                }
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}): {str(e)}"
                print(f"‚ùå {error_msg}")
                return {
                    "status": "error", 
                    "message": error_msg
                }
            finally:
                self.is_regenerating = False
    
    def is_busy(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
        return self.is_regenerating
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return {
            "is_regenerating": self.is_regenerating,
            "last_regeneration": self.last_regeneration,
            "last_regeneration_time": time.strftime('%H:%M:%S', time.localtime(self.last_regeneration)) if self.last_regeneration > 0 else "–ù–∏–∫–æ–≥–¥–∞"
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
regen_manager = RegenerationManager()