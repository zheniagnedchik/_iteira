#!/usr/bin/env python3
"""
–§–∞–π–ª–æ–≤—ã–π watcher –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ files/
"""
import os
import time
import threading
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from sync_manager import regen_manager

class KnowledgeBaseHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, files_path):
        self.files_path = files_path
        self.regeneration_delay = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        self.regeneration_timer = None
        
    def should_process_file(self, file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª"""
        if not file_path:
            return False
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã
        return file_path.lower().endswith(('.xlsx', '.xls'))
    
    def schedule_regeneration(self):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if self.regeneration_timer:
            self.regeneration_timer.cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        self.regeneration_timer = threading.Timer(
            self.regeneration_delay, 
            self.regenerate_knowledge_base
        )
        self.regeneration_timer.start()
    
    def regenerate_knowledge_base(self):
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        result = regen_manager.regenerate(self.files_path, "FileWatcher")
        
        if result["status"] in ["skipped", "in_progress"]:
            print(f"‚ÑπÔ∏è {result['message']}")
        elif result["status"] == "error":
            print(f"‚ùå {result['message']}")
        # –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    
    def on_created(self, event):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        if not event.is_directory and self.should_process_file(event.src_path):
            print(f"üìÅ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(event.src_path)}")
            self.schedule_regeneration()
    
    def on_deleted(self, event):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        if not event.is_directory and self.should_process_file(event.src_path):
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {os.path.basename(event.src_path)}")
            self.schedule_regeneration()
    
    def on_modified(self, event):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        if not event.is_directory and self.should_process_file(event.src_path):
            print(f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {os.path.basename(event.src_path)}")
            self.schedule_regeneration()
    
    def on_moved(self, event):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞"""
        if not event.is_directory:
            if self.should_process_file(event.src_path) or self.should_process_file(event.dest_path):
                print(f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω —Ñ–∞–π–ª: {os.path.basename(event.src_path)} -> {os.path.basename(event.dest_path)}")
                self.schedule_regeneration()

class FileWatcher:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ files"""
    
    def __init__(self, files_path):
        self.files_path = files_path
        self.observer = Observer()
        self.handler = KnowledgeBaseHandler(files_path)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(files_path, exist_ok=True)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        print(f"üëÄ –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ: {self.files_path}")
        
        self.observer.schedule(
            self.handler, 
            self.files_path, 
            recursive=False
        )
        
        self.observer.start()
        print("‚úÖ –§–∞–π–ª–æ–≤—ã–π watcher –∑–∞–ø—É—â–µ–Ω")
        
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ watcher...")
        self.observer.stop()
        self.observer.join()
        
        # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.handler.regeneration_timer:
            self.handler.regeneration_timer.cancel()
        
        print("‚úÖ –§–∞–π–ª–æ–≤—ã–π watcher –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ watcher –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    files_path = os.path.join(base_dir, "files")
    
    watcher = FileWatcher(files_path)
    
    try:
        watcher.start()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        watcher.stop()

if __name__ == "__main__":
    main()