#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ TalkMe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä —Å TalkMe webhook'–æ–º
"""

import os
import sys
import time
import signal
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('talkme_integration.log')
    ]
)
logger = logging.getLogger(__name__)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –ø–∞–∫–µ—Ç—ã
    required_packages = [
        'fastapi', 'uvicorn', 'pydantic', 'requests', 
        'langchain_core', 'python-dotenv'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        from config import BASE_URL_TALKME, OPENAI_API_KEY
        if not BASE_URL_TALKME:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω BASE_URL_TALKME –≤ config.py")
            return False
        if not OPENAI_API_KEY:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω OPENAI_API_KEY –≤ config.py")
            return False
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞
    try:
        from agent.consultation_agent import ConsultationAgent
        agent = ConsultationAgent()
        logger.info("‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def check_ports(ports=[8000]):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"""
    import socket
    
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            result = sock.connect_ex(('localhost', port))
            if result == 0:
                logger.warning(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                return False
        finally:
            sock.close()
    
    logger.info(f"‚úÖ –ü–æ—Ä—Ç—ã {ports} —Å–≤–æ–±–æ–¥–Ω—ã")
    return True

def start_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å TalkMe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞ —Å TalkMe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        import uvicorn
        from api import app
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("\n" + "="*60)
        print("üéôÔ∏è  TALKME –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –î–õ–Ø –ò–¢–ï–ô–†–ê")
        print("="*60)
        print(f"üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print(f"üìû TalkMe Webhook: http://localhost:8000/webhook/talkme")
        print(f"üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:8000/webhook/talkme/stats")
        print(f"‚ù§Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:8000/webhook/talkme/health")
        print(f"üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("="*60)
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60 + "\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            reload=False,
            access_log=True
        )
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def show_config_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from config import BASE_URL_TALKME
        from services.talkme_api import get_api_status
        
        print("\nüìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"   TalkMe API URL: {BASE_URL_TALKME}")
        
        status = get_api_status()
        print("   Endpoints:")
        for name, url in status['endpoints'].items():
            print(f"     - {name}: {url}")
            
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("üéôÔ∏è  –ó–∞–ø—É—Å–∫ TalkMe –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ò—Ç–µ–π—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if not os.path.exists('agent'):
        logger.error("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_config_info()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_requirements():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    if not check_ports([8000]):
        logger.error("‚ùå –ü–æ—Ä—Ç 8000 –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    try:
        success = start_api_server()
        if success:
            logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
