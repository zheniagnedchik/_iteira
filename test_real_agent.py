#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_real_agent():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º"""
    try:
        from agent.consultation_agent import ConsultationAgent
        from langchain_core.messages import HumanMessage
        
        print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º")
        print("=" * 60)
        
        agent = ConsultationAgent()
        
        # –¢–µ—Å—Ç 1: –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        print("üì§ –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python?'")
        test_state_1 = {
            "session_id": "test_session_1",
            "need_rag": True,
            "client_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
            "gender": "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            "messages": [HumanMessage(content="–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python?")]
        }
        
        response_1 = agent.run("test_session_1", test_state_1)
        analyze_response(response_1, "–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", expected_irrelevant=1)
        
        print("\n" + "-" * 60 + "\n")
        
        # –¢–µ—Å—Ç 2: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        print("üì§ –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –º–∞–Ω–∏–∫—é—Ä'")
        test_state_2 = {
            "session_id": "test_session_2",
            "need_rag": True,
            "client_name": "–ê–Ω–Ω–∞",
            "gender": "–∂–µ–Ω—â–∏–Ω–∞",
            "messages": [HumanMessage(content="–•–æ—á—É —Å–¥–µ–ª–∞—Ç—å –º–∞–Ω–∏–∫—é—Ä")]
        }
        
        response_2 = agent.run("test_session_2", test_state_2)
        analyze_response(response_2, "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å", expected_irrelevant=0)
        
        print("\n" + "-" * 60 + "\n")
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        print("üì§ –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏: '–•–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'")
        test_state_3 = {
            "session_id": "test_session_3",
            "need_rag": True,
            "client_name": "–ü–µ—Ç—Ä",
            "gender": "–º—É–∂—á–∏–Ω–∞",
            "messages": [HumanMessage(content="–•–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")]
        }
        
        response_3 = agent.run("test_session_3", test_state_3)
        analyze_response(response_3, "–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏", expected_human_support=1)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º: {e}")
        import traceback
        traceback.print_exc()

def analyze_response(response, test_name, expected_irrelevant=0, expected_human_support=0):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
    print(f"üì• –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞: {test_name}")
    
    if "messages" in response and response["messages"]:
        from langchain_core.messages import AIMessage
        for msg in reversed(response["messages"]):
            if isinstance(msg, AIMessage) and msg.content:
                has_tool_calls = (hasattr(msg, 'additional_kwargs') and 
                                'tool_calls' in msg.additional_kwargs and 
                                msg.additional_kwargs['tool_calls'])
                if not has_tool_calls:
                    bot_response = msg.content
                    print(f"ü§ñ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:\n{bot_response}")
                    print()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if 'query_classification_variables' in bot_response:
                        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ!")
                        
                        # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                        import re
                        
                        is_irrelevant = 0
                        asks_human_support = 0
                        
                        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
                        pattern_line_with_vars = r'.*query_classification_variables.*\n?'
                        match_result = re.search(pattern_line_with_vars, bot_response)
                        
                        if match_result:
                            extracted_variables_line = bot_response[match_result.start():match_result.end()]
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                            pattern_irrelevant = r'is_client_question_irrelevant_to_context=(\d)'
                            irrelevant_match = re.search(pattern_irrelevant, extracted_variables_line)
                            if irrelevant_match:
                                is_irrelevant = int(irrelevant_match.group(1))
                            
                            pattern_human_support = r'does_client_asks_human_support=(\d)'
                            human_support_match = re.search(pattern_human_support, extracted_variables_line)
                            if human_support_match:
                                asks_human_support = int(human_support_match.group(1))
                            
                            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:")
                            print(f"  - –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π: {is_irrelevant} (–æ–∂–∏–¥–∞–µ–º: {expected_irrelevant})")
                            print(f"  - –ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {asks_human_support} (–æ–∂–∏–¥–∞–µ–º: {expected_human_support})")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
                            if is_irrelevant == expected_irrelevant and asks_human_support == expected_human_support:
                                print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ö–û–†–†–ï–ö–¢–ù–ê!")
                            else:
                                print("‚ùå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê!")
                                
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")
                            
                    else:
                        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                        print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–º–ø—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
                    break
    else:
        print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞")

if __name__ == "__main__":
    test_real_agent()
