from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from typing import List
import os
import shutil
import threading
import asyncio
from pathlib import Path
from agent.vector_db import VectorDB
from sync_manager import regen_manager
import uvicorn

app = FastAPI(title="Iteira Knowledge Base API", version="1.0.0")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
FILES_DIR = "files"
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILES_PATH = os.path.join(BASE_DIR, FILES_DIR)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(FILES_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VectorDB
vector_db = VectorDB()

# –ó–∞–ø—É—Å–∫–∞–µ–º API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    print("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

def regenerate_knowledge_base(source="API"):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    try:
        result = regen_manager.regenerate(FILES_PATH, source)
        
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result["message"])
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")

@app.get("/")
async def root():
    return FileResponse("static/index.html")

@app.get("/api")
async def api_info():
    return {"message": "Iteira Knowledge Base API", "version": "1.0.0"}

@app.get("/files")
async def get_files():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = []
        for filename in os.listdir(FILES_PATH):
            file_path = os.path.join(FILES_PATH, filename)
            if os.path.isfile(file_path):
                file_size = os.path.getsize(file_path)
                files.append({
                    "name": filename,
                    "size": file_size,
                    "path": f"/files/{filename}"
                })
        return {"files": files, "count": len(files)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/files/{filename}")
async def download_file(filename: str):
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
    file_path = os.path.join(FILES_PATH, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type='application/octet-stream'
    )

@app.post("/files/upload")
async def upload_files(files: List[UploadFile] = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤"""
    uploaded_files = []
    
    try:
        for file in files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not file.filename.endswith(('.xlsx', '.xls')):
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã"
                )
            
            file_path = os.path.join(FILES_PATH, file.filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(file.file, buffer)
            
            uploaded_files.append({
                "name": file.filename,
                "size": os.path.getsize(file_path),
                "status": "uploaded"
            })
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        regenerate_result = regenerate_knowledge_base()
        
        return {
            "uploaded_files": uploaded_files,
            "knowledge_base": regenerate_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.delete("/files/{filename}")
async def delete_file(filename: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
    file_path = os.path.join(FILES_PATH, filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        os.remove(file_path)
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        regenerate_result = regenerate_knowledge_base()
        
        return {
            "message": f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "knowledge_base": regenerate_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.delete("/files")
async def delete_all_files():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"""
    try:
        deleted_files = []
        for filename in os.listdir(FILES_PATH):
            file_path = os.path.join(FILES_PATH, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)
                deleted_files.append(filename)
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (–æ–Ω–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π)
        regenerate_result = regenerate_knowledge_base()
        
        return {
            "message": f"–£–¥–∞–ª–µ–Ω–æ {len(deleted_files)} —Ñ–∞–π–ª–æ–≤",
            "deleted_files": deleted_files,
            "knowledge_base": regenerate_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.post("/knowledge-base/regenerate")
async def regenerate_kb():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    return regenerate_knowledge_base()

@app.get("/knowledge-base/status")
async def get_kb_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        chroma_path = vector_db.persist_directory
        kb_exists = os.path.exists(chroma_path)
        
        files_count = len([f for f in os.listdir(FILES_PATH) if os.path.isfile(os.path.join(FILES_PATH, f))])
        
        return {
            "knowledge_base_exists": kb_exists,
            "files_count": files_count,
            "chroma_path": chroma_path
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")



@app.get("/knowledge-base/regeneration/status")
async def get_regeneration_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    status = regen_manager.get_status()
    return {
        "is_regenerating": status["is_regenerating"],
        "last_regeneration_time": status["last_regeneration_time"],
        "manager_status": "–ê–∫—Ç–∏–≤–µ–Ω" if not status["is_regenerating"] else "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)