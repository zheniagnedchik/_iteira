from fastapi import FastAPI, UploadFile, File, HTTPException, Request
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from typing import List
import os
import shutil
import threading
import asyncio
from pathlib import Path
from agent.vector_db import VectorDB
from sync_manager import regen_manager
from integrations.talkme_integration import handle_talkme_webhook, get_talkme_stats, clear_talkme_session, clear_all_talkme_sessions
import uvicorn

app = FastAPI(title="Iteira Knowledge Base API", version="1.0.0")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
FILES_DIR = "files"
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FILES_PATH = os.path.join(BASE_DIR, FILES_DIR)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(FILES_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VectorDB
vector_db = VectorDB()

# –ó–∞–ø—É—Å–∫–∞–µ–º API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    print("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    ensure_data_directories()

def refresh_rag_cache_internal():
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RAG –∫—ç—à–∞"""
    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –∏–º–ø–æ—Ä—Ç–æ–≤ Python –¥–ª—è –º–æ–¥—É–ª—è tools
        import sys
        if 'agent.tools' in sys.modules:
            import importlib
            importlib.reload(sys.modules['agent.tools'])
        
        from agent.tools import get_vector_store
        import chromadb
        from config import CHROMA_PATH
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ
        vector_store = get_vector_store()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        client = chromadb.PersistentClient(path=CHROMA_PATH)
        langchain_col = client.get_collection('langchain')
        doc_count = langchain_col.count()
        
        return {
            "success": True,
            "message": "RAG –∫—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω (—Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª—è)",
            "documents_count": doc_count
        }
    except Exception as e:
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RAG –∫—ç—à–∞: {str(e)}",
            "documents_count": 0
        }

def ensure_data_directories():
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    import stat
    
    directories = [
        os.path.join(BASE_DIR, "data"),
        os.path.join(BASE_DIR, "data", "chroma_db"),
        os.path.join(BASE_DIR, "data", "knowledge_base"),
        FILES_PATH
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ 777 –¥–ª—è –ø–∞–ø–∫–∏
            os.chmod(directory, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è {directory}: {e}")

def update_knowledge_base_incremental(source="API"):
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        ensure_data_directories()
        
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        result = vector_db.update_knowledge_base_incrementally(FILES_PATH)
        
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result["message"])
        
        print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")

def add_file_to_knowledge_base(file_path, source="API"):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        ensure_data_directories()
        
        print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {os.path.basename(file_path)} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        
        result = vector_db.add_file_to_knowledge_base(file_path)
        
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result["message"])
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {str(e)}")

def remove_file_from_knowledge_base(filename, source="API"):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        ensure_data_directories()
        
        print(f"‚ûñ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {filename} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        
        result = vector_db.remove_file_from_knowledge_base(filename)
        
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result["message"])
        
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")

def regenerate_knowledge_base(source="API"):
    """–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        ensure_data_directories()
        
        result = regen_manager.regenerate(FILES_PATH, source)
        
        if result["status"] == "error":
            raise HTTPException(status_code=500, detail=result["message"])
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}")

@app.get("/")
async def root():
    return FileResponse("static/index.html")

@app.get("/api")
async def api_info():
    return {"message": "Iteira Knowledge Base API", "version": "1.0.0"}

@app.get("/files")
async def get_files():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = []
        for filename in os.listdir(FILES_PATH):
            file_path = os.path.join(FILES_PATH, filename)
            if os.path.isfile(file_path):
                file_size = os.path.getsize(file_path)
                files.append({
                    "name": filename,
                    "size": file_size,
                    "path": f"/files/{filename}"
                })
        return {"files": files, "count": len(files)}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/files/{filename}")
async def download_file(filename: str):
    """–°–∫–∞—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
    file_path = os.path.join(FILES_PATH, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type='application/octet-stream'
    )

@app.post("/files/upload")
async def upload_files(files: List[UploadFile] = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤"""
    uploaded_files = []
    
    try:
        for file in files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not file.filename.endswith(('.xlsx', '.xls')):
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã"
                )
            
            file_path = os.path.join(FILES_PATH, file.filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(file.file, buffer)
            
            uploaded_files.append({
                "name": file.filename,
                "size": os.path.getsize(file_path),
                "status": "uploaded"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ
        knowledge_base_results = []
        for file_info in uploaded_files:
            file_path = os.path.join(FILES_PATH, file_info["name"])
            kb_result = add_file_to_knowledge_base(file_path)
            knowledge_base_results.append({
                "filename": file_info["name"],
                "knowledge_base_result": kb_result
            })
        
        return {
            "uploaded_files": uploaded_files,
            "knowledge_base_updates": knowledge_base_results
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.delete("/files/{filename}")
async def delete_file(filename: str):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
    file_path = os.path.join(FILES_PATH, filename)
    
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        kb_result = remove_file_from_knowledge_base(filename)
        
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        return {
            "message": f"–§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            "knowledge_base_result": kb_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@app.delete("/files")
async def delete_all_files():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"""
    try:
        deleted_files = []
        for filename in os.listdir(FILES_PATH):
            file_path = os.path.join(FILES_PATH, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)
                deleted_files.append(filename)
        
        # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (–æ–Ω–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π)
        regenerate_result = regenerate_knowledge_base()
        
        return {
            "message": f"–£–¥–∞–ª–µ–Ω–æ {len(deleted_files)} —Ñ–∞–π–ª–æ–≤",
            "deleted_files": deleted_files,
            "knowledge_base": regenerate_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.post("/knowledge-base/regenerate")
async def regenerate_kb():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (–ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)"""
    result = regenerate_knowledge_base()
    return result

@app.post("/knowledge-base/update")
async def update_kb():
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    result = update_knowledge_base_incremental()
    return result

@app.get("/knowledge-base/status")
async def get_kb_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        chroma_path = vector_db.persist_directory
        kb_exists = os.path.exists(chroma_path)
        
        files_count = len([f for f in os.listdir(FILES_PATH) if os.path.isfile(os.path.join(FILES_PATH, f))])
        
        return {
            "knowledge_base_exists": kb_exists,
            "files_count": files_count,
            "chroma_path": chroma_path
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")



@app.post("/knowledge-base/refresh-cache")
async def refresh_rag_cache():
    """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à RAG –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    result = refresh_rag_cache_internal()
    if result["success"]:
        result["timestamp"] = __import__('datetime').datetime.now().isoformat()
        return result
    else:
        raise HTTPException(status_code=500, detail=result["message"])


@app.get("/knowledge-base/regeneration/status")
async def get_regeneration_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    status = regen_manager.get_status()
    return {
        "is_regenerating": status["is_regenerating"],
        "last_regeneration_time": status["last_regeneration_time"],
        "manager_status": "–ê–∫—Ç–∏–≤–µ–Ω" if not status["is_regenerating"] else "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    }

# ========== TALK ME WEBHOOK ENDPOINTS ==========

@app.post("/webhook/talkme")
async def talkme_webhook_endpoint(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Talk Me"""
    return await handle_talkme_webhook(request)

@app.get("/webhook/talkme/health")
async def talkme_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Talk Me webhook"""
    return {"status": "ok", "service": "talkme_webhook"}

@app.get("/webhook/talkme/stats")
async def talkme_get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö Talk Me —Å–µ—Å—Å–∏–π"""
    return await get_talkme_stats()

@app.delete("/webhook/talkme/session/{user_id}")
async def talkme_clear_session_endpoint(user_id: str):
    """–û—á–∏—Å—Ç–∫–∞ Talk Me —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await clear_talkme_session(user_id)

@app.delete("/webhook/talkme/sessions")
async def talkme_clear_all_sessions():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö Talk Me —Å–µ—Å—Å–∏–π"""
    return await clear_all_talkme_sessions()

@app.post("/webhook/talkme/debug")
async def talkme_debug_endpoint(request: Request):
    """DEBUG: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç TalkMe"""
    body = await request.body()
    return {
        "headers": dict(request.headers),
        "body_raw": body.decode('utf-8', errors='replace'),
        "body_size": len(body),
        "url": str(request.url),
        "method": request.method,
        "query_params": dict(request.query_params)
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)